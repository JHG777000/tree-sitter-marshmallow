---Comments in marshmallow.---

 +++Comment
 ...Comment
 **Comment
 //Comment

+-*************************************************************
*  Block comment, in marshmallow.                             *
*                                                             *
*************************************************************-+

/**************************************************************
*  Block comment, in marshmallow.                             *
*                                                             *
**************************************************************/

module mymod.

use module othermod.

class generic_list_class( polymorph type t )*.
 private polymorph type list_type := t.
 private allocator_type memalloc := _get_lambda(mmalloc).
 private long num_of_nodes.
 private list_node first.
 private list_node last.
 class list_node( t )*.
  private list_node before.
  private list_node after.
  private t data.
 end class.
end class.

 enum i32 myenum.
  default enum1 := 5223.
  default enum2.
  default enum3 := 42.
  default enum4 := (-(40+2)).
  default enum5 := 0.
  default enum6 := (3<<3).
 end enum.

 vector 3,i32 myvec.
  vector_name x,y,z.
 end vector.

 extension constructor,(polymorph type classtype),(polymorph arguments params).
  iff (_is_array(loop_array)).
  iff (_itemsof(loop_array) > 0).
  iff (_typeofvar(loop_item) == _typeofarray(loop_array)).
  define {
   function, {
    override, default, "new", params, classtype, invoke_extension_block
    }
  }.
  generate x := (1 + 1).
  lambda function() returns int, int mylambda.
 end extension.

 operator + (i32 a, i32 b) returns i32.
  array:{array:i32,array:i32} myarray := new(new(1,2,3,4,5),new(1,2,3,4,5)).
  return (a + b).
 end operator.

 message "hello world".
  hello x := ($i8($$$u64($$$int*($$int[](array))))).
  i32[5] myvar2 := get_val()-->got(default)[1].
  x := (1 (+) 1).
 end message.

 constructor myclass().
  self->val2 := val.
  s8 mystring := "Hello World!!!!".
  f32 myvar := (.2f).
  i32 myvar2 := 1.
  i32* myvar2 := null.
  u64 val987 := get_val()->got().
  u64 ðŸ˜ƒ := 'ðŸ˜ƒ'.
  u32 ðŸ˜ƒ2 := ($u32(ðŸ˜ƒ)).
  f64[3][3] myvar := {{1,1,1},{1,1,1},{1,1,1}}.
  myvar := (3+(myvar:=1)).
  (myvar+=3).
  myvar++.
  myvar--.
  (myvar++)++.
 end constructor.

 function myfunc(i8 arg1, i32 arg2 := '\0', f32* arg3 := null, polymorph arguments my_args) returns i32, i32.
  f32 myvar := (.2f).
  f64[3][3] myvar := {{1,1,1},{1,1,1},{1,1,1}}.
  myvar := (3+(myvar:=1)).
  (myvar+=3).
  myvar++.
  (myvar++)++.
  myvar := ((myvar++)+1).
  section helloworld.
  if (myvar).
   myvar--.
   if ((myvar++):=3).
    myvar++.
   end if.
  end if.
  if (1) while ( myvar!=(myvar!=42) ).
   switch (myvar).
    case (1).
    end case.
    default.
    end default.
   end switch.
  end while.
  if (j) goto helloworld.
  return {4,(1+1)}.
 end function.
end module.
